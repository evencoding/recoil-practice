{"version":3,"sources":["GlobalStyles.tsx","atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.tsx"],"names":["GlobalStyles","createGlobalStyle","reset","props","theme","bgColor","textColor","cat","localStorage","getItem","localCat","JSON","parse","locatCategory","length","categoryState","atom","key","default","output","localData","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","useRecoilState","setToDos","useRecoilValue","useForm","register","handleSubmit","setValue","setItem","stringify","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","map","onClick","newCategory","targetIndex","findIndex","newToDo","slice","ToDoList","useState","render","setRender","setCategory","value","onInput","event","currentTarget","addCategory","newCategoryArr","push","App","ReactDOM","StrictMode","accentColor","document","getElementById"],"mappings":"+LAmBeA,EAhBMC,YAAH,qRACZC,KAKsB,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,a,6BCGpCC,EAAMC,aAAaC,QAAQ,YAC3BC,EAAWC,KAAKC,MAAML,GAGbM,GAAwB,OAARH,QAAQ,IAARA,OAAA,EAAAA,EAAUI,QAAS,EAAIJ,EAFhC,CAAC,QAAS,QAAS,QAI1BK,EAAgBC,YAAa,CACxCC,IAAK,WACLC,QAASL,EAAc,KAGrBM,EAASX,aAAaC,QAAQ,SAC9BW,EAAYT,KAAKC,MAAMO,GAEdE,EAAYL,YAAc,CACrCC,IAAK,OACLC,SAAkB,OAATE,QAAS,IAATA,OAAA,EAAAA,EAAWN,QAAS,EAAIM,EAAY,KAGlCE,EAAeC,YAAS,CACnCN,IAAK,eACLO,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIT,GACrB,OAAOU,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,cCNrCG,MAvBf,WACE,MAA0BC,YAAeT,GAAzC,mBAAOI,EAAP,KAAcM,EAAd,KACML,EAAWM,YAAejB,GAChC,EAA6CkB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAShC,OADA5B,aAAa6B,QAAQ,QAAS1B,KAAK2B,UAAUb,IAE3C,uBAAMc,SAAUJ,GATD,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,KAClBG,GAAS,SAACS,GAAD,OACP,CAAEd,WAAUe,KAAMb,EAAMc,GAAIC,KAAKC,QAD1B,mBAEJJ,OAELJ,EAAS,OAAQ,OAIjB,UACE,iDACMF,EAAS,OAAQ,CAAEW,SAAU,0BADnC,IAEEC,YAAY,mBAEd,6CCeSC,MArCf,YAA8C,IAA9BN,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,GAAIhB,EAAmB,EAAnBA,SACxB,EAA0BI,YAAeT,GAAzC,mBAAOI,EAAP,KAAcM,EAAd,KAsBA,OADAvB,aAAa6B,QAAQ,QAAS1B,KAAK2B,UAAUb,IAE3C,+BACE,+BAAOgB,IACN5B,EAAcmC,KACb,SAACzC,GAAD,OACEmB,IAAanB,GACX,wBAAQ0C,QAAS,kBA3BVC,EA2BwB3C,OA1BvCwB,GAAS,SAACS,GACR,IAAMW,EAAcX,EAASY,WAAU,SAACxB,GAAD,OAAUA,EAAKc,KAAOA,KACvDW,EAAU,CAAEZ,OAAMC,KAAIhB,SAAUwB,GACtC,MAAM,GAAN,mBACKV,EAASc,MAAM,EAAGH,IADvB,CAEEE,GAFF,YAGKb,EAASc,MAAMH,EAAc,QAPtB,IAACD,GA2BP,SAAsC3C,OAG5C,wBAAQ0C,QAnBO,WACjBlB,GAAS,SAACS,GACR,IAAMW,EAAcX,EAASY,WAAU,SAACxB,GAAD,OAAUA,EAAKc,KAAOA,KAC7D,MAAM,GAAN,mBACKF,EAASc,MAAM,EAAGH,IADvB,YAEKX,EAASc,MAAMH,EAAc,SAclC,wBCmBSI,MA5Cf,WACE,IAAM9B,EAAQO,YAAeV,GAC7B,EAA4BkC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA6CzB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAChC,EAAgCN,YAAef,GAA/C,mBAAOW,EAAP,KAAiBiC,EAAjB,KAWA,OACE,gCACE,wCACA,uBACA,wBAAQC,MAAOlC,EAAUmC,QAdb,SAACC,GACfH,EAAYG,EAAMC,cAAcH,QAa9B,SACG/C,EAAcmC,KAAI,SAACzC,GAAD,OACjB,wBAAkBqD,MAAOrD,EAAzB,SACGA,GADUA,QAKjB,uBAAMgC,SAAUJ,GAlBH,SAAC,GAA4B,IAA1B6B,EAAyB,EAAzBA,YACZC,EAAiBpD,EACvBoD,EAAeC,KAAKF,GACpBxD,aAAa6B,QAAQ,WAAY1B,KAAK2B,UAAU2B,IAChD7B,EAAS,cAAe,IACxBsB,GAAWD,MAaT,UACE,iDACMvB,EAAS,cAAe,CAC1BW,SAAU,iCAFd,IAIEC,YAAY,0BAEd,4CAEF,uBACA,cAAC,EAAD,IApBF,OAqBGrB,QArBH,IAqBGA,OArBH,EAqBGA,EAAOuB,KAAI,SAACpB,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKc,WCpCTyB,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCDNC,IAASX,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAejE,MCRkB,CACrCC,QAAS,UACTC,UAAW,UACXgE,YAAa,WDKT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.144852b4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset}\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        background-color: ${(props) => props.theme.bgColor};\r\n        color: ${(props) => props.theme.textColor};\r\n        font-family: 'Source Sans Pro', sans-serif;\r\n    }\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import { atom, selector } from \"recoil\";\r\n\r\n// export enum Categories {\r\n//   \"TO_DO\" = \"TO_DO\",\r\n//   \"DOING\" = \"DOING\",\r\n//   \"DONE\" = \"DONE\",\r\n// }\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string;\r\n}\r\nlet cat = localStorage.getItem(\"localCat\");\r\nlet localCat = JSON.parse(cat as any);\r\nconst categoryArr = [\"TO DO\", \"DOING\", \"DONE\"];\r\n\r\nexport const locatCategory = localCat?.length > 0 ? localCat : categoryArr;\r\n\r\nexport const categoryState = atom<string>({\r\n  key: \"category\",\r\n  default: locatCategory[0],\r\n});\r\n\r\nlet output = localStorage.getItem(\"toDos\");\r\nlet localData = JSON.parse(output as any);\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: localData?.length > 0 ? localData : [],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\nexport interface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const onSubmit = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { category, text: toDo, id: Date.now() },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  localStorage.setItem(\"toDos\", JSON.stringify(toDos));\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <input\r\n        {...register(\"toDo\", { required: \"Please write a To Do\" })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>ADD</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { IToDo, locatCategory, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, id, category }: IToDo) {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const onClick = (newCategory: IToDo[\"category\"]) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: newCategory };\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  const deleteTodo = () => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  localStorage.setItem(\"toDos\", JSON.stringify(toDos));\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {locatCategory.map(\r\n        (cat: any) =>\r\n          category !== cat && (\r\n            <button onClick={() => onClick(cat)}>{cat}</button>\r\n          )\r\n      )}\r\n      <button onClick={deleteTodo}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, locatCategory, toDoSelector } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\ninterface IForm {\r\n  addCategory: string;\r\n}\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [render, setRender] = useState(true);\r\n  const { register, handleSubmit, setValue } = useForm();\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  const onSubmit = ({ addCategory }: IForm) => {\r\n    const newCategoryArr = locatCategory;\r\n    newCategoryArr.push(addCategory);\r\n    localStorage.setItem(\"localCat\", JSON.stringify(newCategoryArr));\r\n    setValue(\"addCategory\", \"\");\r\n    setRender(!render);\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        {locatCategory.map((cat: any) => (\r\n          <option key={cat} value={cat}>\r\n            {cat}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <input\r\n          {...register(\"addCategory\", {\r\n            required: \"Please write a new category\",\r\n          })}\r\n          placeholder=\"Write a new category\"\r\n        />\r\n        <button>ADD</button>\r\n      </form>\r\n      <hr />\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  accentColor: \"#9c88ff\",\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"#f5f6fa\",\r\n  textColor: \"black\",\r\n  accentColor: \"#9c88ff\",\r\n};\r\n"],"sourceRoot":""}